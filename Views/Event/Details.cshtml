@model Evention2.Models.EventDetailViewModel
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = Model.aEvent.EventName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!--MapBox references-->
<script src='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.css' type='text/css' />
<div>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb" style="background-color:rgba(0,0,0,0)">
            <li class="breadcrumb-item">@Html.ActionLink("Home", "Index", "Home")</li>
            <li class="breadcrumb-item">@Html.ActionLink("Event List", "Index", "Event")</li>
            <li class="breadcrumb-item active">@Html.DisplayFor(model => model.aEvent.EventName)</li>
        </ol>
    </nav>
</div>

<div class="row justify-content-between align-items-end">
    <div class="col-md-10">
        <h2>@Html.DisplayFor(model => model.aEvent.EventName)</h2>
    </div>
    <div class="col-md-2">
        @if (User.Identity.GetUserId() == Model.aEvent.OwnerId)
        {
            <p>
                @Html.ActionLink("Edit", "Edit", new { id = Model.aEvent.EventId }, new { @class = "d-inline btn btn-outline-primary" })
            </p>
            <p>
                @Html.ActionLink("Ticket Manage", "Detail", "Ticket", new { id=Model.aEvent.EventId}, new { @class = "d-inline btn btn-info"})
            </p>
        }
    </div>
</div>

<div>
    <hr />
    <div class="row">
        <div class="col-sm-12 col-md-4">
            <img src="@Url.Content(Model.aEvent.PosterImg)" class="img-fluid" />
            <h4>Rating: @ViewBag.AvgScore</h4>
            <h5>Description</h5>
            <p>@Html.DisplayFor(model => model.aEvent.EventDesc)</p>
        </div>
        <div class="col-md-8">
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.EventName)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.EventName)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.EventDesc)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.EventDesc)
                </dd>

                <dt>
                    Address
                </dt>

                <dd>
                    @{
                        string address = Model.aEvent.Street + ", " + Model.aEvent.Surburb + " " + Model.aEvent.State + " " + Model.aEvent.PostCode;
                    }
                    @address
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.Phone)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.Phone)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.Email)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.Email)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.Start_date)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.Start_date)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.aEvent.End_date)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.aEvent.End_date)
                </dd>

            </dl>
        </div>
    </div>
</div>
@if (User.Identity.IsAuthenticated)
{
<div class="row">
    <p data-target="#eventShareModal" data-toggle="modal"><a href="#">Share by email</a></p>
</div>
}
<div class="row">
    <h2>Ticketing Information</h2>
</div>
@if (Model.tickets == null || Model.tickets.Count == 0)
{
    <div class="row">
        <div class="alert alert-light">No ticketing information available to this event.</div>
    </div>
}
else
{
    <div class="row">
        @for (var i = 0; i < Model.tickets.Count; i++)
        {
            <div class="col mx-2 py-2 border">
                <h4>@Model.tickets[i].Sku_Name</h4>
                <p>@Model.tickets[i].Sku_Desc</p>
                <p>AU$@Model.tickets[i].Price</p>
            </div>
        }
    </div>
    <div class="row">
        <p>Have decided to join? <a href="@Url.Action("Buy","Ticket")/@Model.aEvent.EventId"> Click here to ticket purchase page.</a></p>
    </div>
}


<h2>Location Map</h2>
<div class="row">
    <div id='map' style='width: 100%; height: 450px;'></div>
    <script>
        function setMap(token, cord) {
            console.log("initialization cord: " + cord);
            mapboxgl.accessToken = token;
            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: cord,
                zoom: 14
            });
            var md = new MapboxDirections({
                accessToken: token,
                unit: 'metric',
                controls: { inputs: true },
                //placeholderDeatination: "@address"
            });

            map.on('load', () => {
                md.setDestination("@address");
                map.loadImage('/Content/img/target_loc_128.png', (error, image) => {
                    if (error) throw error;
                    map.addImage('cao', image);
                    map.addLayer({
                        "id": "points",
                        "type": "symbol",
                        "source": {
                            "type": "geojson",
                            "data": {
                                "type": "FeatureCollection",
                                "features": [{
                                    "type": "Feature",
                                    "geometry": {
                                        "type": "Point",
                                        "coordinates": cord
                                    }
                                }]
                            }
                        },
                        "layout": {
                            "icon-image": ["concat", ["get", "icon"], "cao"],
                            "icon-size": 0.4,
                            "text-radial-offset": 0.5,
                            "text-justify": "left",
                        }
                    });
                });
            });
            md.on('origin', () => {
                $.get({
                    url: "https://api.mapbox.com/geocoding/v5/mapbox.places/" + md.getOrigin()["geometry"]["coornidates"]
                })
                map.removeLayer('points');
            });
            map.addControl(md, 'top-left');
            mapd = md;
            m = map;
        }

        function initMap(token, addr, mapReference) {
            queryAPI = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + encodeURIComponent(addr) + '.json';
            console.log(queryAPI);
            cord = []
            $.get({
                url: queryAPI,
                data: {
                    "access_token": token,
                    "country": "au",
                    "limit": 1
                },
                success: (res, status, xhr) => {
                    console.log(res);
                    cord = res["features"][0]["center"];
                    console.log(cord);
                    setMap(token, cord, mapReference);
                },
                dataType: "json"
            });
        }

        function setTransitPoints(token, map, callback) {
            mapBounds = map.getBounds();
            bound = [mapBounds._sw.lng, mapBounds._sw.lat, mapBounds._ne.lng, mapBounds._ne.lat];
            queryAPI = 'https://api.mapbox.com/geocoding/v5/mapbox.places/bus.json';
            $.get({
                url: queryAPI,
                data: {
                    "access_token": token,
                    "bbox": bound.join(),
                },
                success: (res, status, xhr) => {
                    features = res["features"]
                    console.log(features.length + " fetched");
                    console.log(features);
                    stops = [];
                    features.forEach(point => {
                        pointType = point.properties.maki;
                        if (pointType === "bus" || pointType === "rail")
                            stops.push(point);
                    });
                    callback(stops);
                }
            })
        }

        function addTransitPoints(stops) {
            console.log("queried transit station");
            console.log(stops);
            m.loadImage("/Content/img/transit_loc_192h.png", (error, image) => {
                if (error) throw error;
                m.addImage('transitStop', image);
                m.addLayer({
                    "id": "transits",
                    "type": "symbol",
                    "source": {
                        "type": "geojson",
                        "data": {
                            "type": "FeatureCollection",
                            "features": stops
                            /*[{"type": "Feature", "geometry": {"type": "Point", "coordinates": cord}}]*/
                        }
                    },
                    "layout": {
                        "icon-image": "transitStop",
                        "icon-size": 0.3,
                        "text-field": ["get", "description"],
                        "text-radial-offset": 0.5,
                        "text-justify": "auto",
                    }
                });
            });
        }

        $(window).ready(() => {
            token = 'pk.eyJ1IjoiamVycnljaGEiLCJhIjoiY2sxNXNldmdmMHlibjNjdGM4MnAyZHR4aCJ9.OjElwhEEogXkUfGOgpX3mA';
            var m;  // Reference of map.
            var mapd; // Reference of mapbox direction
            initMap(token, "@address", m);
        });
    </script>
</div>
<div class="row my-3" style="display:block">
    @Html.Partial("~/Views/Rate/_EventRates.cshtml", Model.eventRates, new ViewDataDictionary { { "eventId", Model.aEvent.EventId } })
</div>

@if (User.Identity.IsAuthenticated)
{ 
@Html.Partial("~/Views/Event/_Share.cshtml", Model.aEvent)
}